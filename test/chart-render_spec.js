var should = require('should');
var helper = require("node-red-node-test-helper");
var chartNode = require("../src/chart-render.js");

helper.init(require.resolve('node-red'));

describe('chart-render Node', function () {
  // this.timeout(5000);

  beforeEach(function (done) {
    helper.startServer(done);
  });

  afterEach(function (done) {
    helper.unload();
    helper.stopServer(done);
  });

  it('should be loaded', function (done) {
    var flow = [{ id: "n1", type: "chart-render", name: "test name" }];
    helper.load(chartNode, flow, function () {
      var n1 = helper.getNode("n1");
      n1.should.have.property('name', 'test name');
      done();
    });
  });

  it("should return line chart with default config", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return bar chart with default config", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Bar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return pie chart with default config", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Pie chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return radar chart with default config", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Radar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQCAYAAACAvzbMAAAABmJLR0QA/wD/AP+gvaeTAAAE1ElEQVR4nO3aS6inYxzA8e9wYqaRSC6TkBksxsLCIJcFJZdcUgrFRmkuNQsWFIVZOYtZIRIpReNSkjQWLGShEY5kFobF0KFEbmlCE47F+6rjNMxM5jgz4/Opt////3su/9+7eZ9+z/MWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsB+ZqB6aE7u4eqZ6vrplVvz66o3qx+q2ecrnrOq96tR5mh+AfeCK6qnqi1mx5dXX1Q3VJdVH1U3VhdX26v5qpvq2On0f5rKsuq/6bJx/5e4GHLIP/xyAvXN+9cuc2GXV5uqFhmrjyerS6sxqY/X+2O/j6trq3erehuf5Aw2Lz47qieqw6ulxzJ/P+83Vi7vIZWl1YjX9728LgP/Civ5agSyulozfl1ZvVutmtd/TUCF8Un01ti+pbh3jd1Zrq1+r28exM9V51XHVb2Ofv7O2PaxAJnbXAf7Ptm7dumGhc+DgNjU1dfT69euP3LJly4bZ8U2bNi2fnJw8u3qpenxW0+Lxc0W1qLqg+rm6vKGaOWa8fqiuqW6sHqyurraNY5+rHqtWjb/vrl7f29wtIAD7mdWrV185PT29rGGL6oMxfFH1acOWVQ1bVcdXd1VrqsMbDte/H9s3Vl9W31SvVVdVp1RvVZ+PbdvHvjvm8XYAmCdzt7Cua6gGDp3T7+FqsqGqmKlert5p2JJa1XC4vrOhEllZvVrdMY69ufq9oSpZ1z/b4y0sABbW3AXk0eqn6rtZ1yMN1cO26sOGB/xUdVpD1fF2dVT1ytg20/Aq7knjnEc0VBk7q2N3k48FBOAgNFGdUZ3ccP6xKyc0LDazLWpYfJ6dv9QAONgsbTjvmKnOXeBcADiATDScgZyz0IkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5I/AIEIfzI+xMxZAAAAAElFTkSuQmCC"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return polar area chart with default config", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Polar area chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })


  it("should output tiwce for 2 inputs (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      let count = 0;
      n2.on("input", (msg) => {
        try {
          if (count == 0) {
            msg.payload.should.equal(
                "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"
            );
          }else if (count === 1) {
            msg.payload.should.equal(
                "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"
            );
            done();
          }
          count++;
        } catch (err) {
          done(err);
        }
      })
      n1.receive({payload: 123});
      n1.receive({payload: 123});
    })
  })

  it("should output tiwce for 2 inputs (Array input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      let count = 0;
      n2.on("input", (msg) => {
        try {
          if (count === 0) {
            msg.payload.should.equal(
                "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"
            );
          } else if (count === 1) {
            msg.payload.should.equal(
                "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"
            );
            done();
          }
          count++;
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: [1, 2, 3]});
      n1.receive({payload: [4, 5, 6]});
    })
  })


  it("should error (error type input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n1.receive({payload: false});
      n1.on("call:error", (call) => {
        done()
      })
    })
  })
 

  it("should return default line chart with format input", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: "2020-10-1",
          y: 123,
          format: "date:%Y-%m-%d"
      });
    })
  })

  it("should return default bar chart with format input", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Bar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: "2020-10-1",
          y: 123,
          format: "date:%Y-%m-%d"
      });
    })
  })


  it("should return default pie chart with format input", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Pie chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: "2020-10-1",
          y: 123,
          format: "date:%Y-%m-%d"
      });
    })
  })


  it("should return default radar chart with format input", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Radar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQCAYAAACAvzbMAAAABmJLR0QA/wD/AP+gvaeTAAAE60lEQVR4nO3aS6hVVRzH8a+vqIQigijoAQaNahQRkoZChEKEUFSDoJlk2SyIJmEPMCIcVFpIUEEIjYKoUYMyAoMQA3sIvUiKsMBB9IY8DfYWj9drdjNT8vOBzbnrv87ed+3J+rHWOgUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwOnnrOqSasHJHggAR1pYPTWjtqJ6uXqlunOqfkv1ffVb9UO1f+p6slpWfV5de5xjurh6uzpQTapfqk0JEoBTxqrqxerrqdqS6rvqtmpl9Ul1R3Vd9UXDRP5SQ4hMqs3VA9WN4zVpCKB/an61q/q1erC6qSHIJtVDx/FcAP5FD1fPdXiA3F29MNW+v3q+Wlutm6rvaZjUl07VDgbIM9W31TfV7WPf6obVyTVj+9Hqw1nGtHJ8xiNTtfnVxw3BNm+s3XeslwPgxLq8wwPkzIazh6rF1fYOD46V1ePVVx09QLZXa6pPGyb9qlvHvuVj+9nqx1nGc2+zr2K2jPULq+urycK/8XJw2tq9e/eGkz0G/t927tx53vr168/ZsWPHhun6tm3blmzcuPHq6tVq61TX4oaziHP/4rFPVG9UN1T3zHFIB1cYB2bUD0z1r6rh8AaAU8jatWtX792796Lq5uqDsbys+rJ6fbyubJzIZ/HT+Pl7w4Q/r2H1UMN2VNXZR7l3z/i5vHpn/Hve+P/3V/saQmxy5K0A/JdmbmGtqd7syF88PV1tnGq/19G3sFaM7U1je95YmzSsTpY2nI/MtoW1oPpo7FvXECRbx3sfG79zVwIE4KSbGSBbqp87/Ce6m6vLGlYHb1XvV581twA5o3p3bO8bnzNbgBwc067xu5Pqj4aD/EVj/6Lqtbm/KgAny8LqiurSDp1VzNX5HQqCY7mguqphywoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADghPgTGBiPIH1jJVYAAAAASUVORK5CYII="
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: "2020-10-1",
          y: 123,
          format: "date:%Y-%m-%d"
      });
    })
  })


  it("should return default polar area chart with format input", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Polar area chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              ""
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: "2020-10-1",
          y: 123,
          format: "date:%Y-%m-%d"
      });
    })
  })


  it("should return default line chart with format input (Array intput)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "iVBORw0KGgoAAAANSUhEUgAAAcgAAAEICAYAAADbSWReAAAABmJLR0QA/wD/AP+gvaeTAAAQ4UlEQVR4nO3deZRW9X3H8feAgiCgKBGVQ9QENakaNW1NK2qNS7RWtDUqGrdEcKtJtErlzKnWapKCpiaKejzujVsSG9ytGLcGYqy7GE3ivoGIuCOCCkz/+N7J3GfmNw+Yen93Bt6vc+Yw9/fcefz61+f87vL9giRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJktTr9K34+8cCTwNLi+MhwAHATsD7wOulOsYCuxVrb1dclyRJTfWp6HvXB8YBlwOrltavB0YBbwE3Fb8DnAGMKdanASMqqkuSpOWySkXfuxWwMbCktDYA+AA4pTjeAdgceBk4GNgQWASMJHaZZ1VUmyRJtZsNDOy0thlwNvAAMIgI0kdLnx8IXJClOkmSulHVDrKZN4EZwGhgD2Bms5MnTZr0by0tLaeW19ra2n7V2tq6Y2UVSpJUsfIOchQdl1cBDgXOBwYD84CWYn0iMKHZl06ePLnt0y1TkqRGVT2kkzIXOJx4UvVLwLeAu4D5xI6yFdiGCM6pGeuSJKmLqgPyfODj4vf5wN7APwAnFJ9dV3w2HhgGfBs4Bnih4rokSVrxeIlVklS1nJdYJUnqNQxISZISDEhJkhIMSEmSEupoFPD/Nn/JauzV+vPRddchSepdbpo09t7lPbdXBuTM+esCbb+uuw5JUq/TsuxTQtUBuTrRoLz8WkZf4p3HuZ3O7Vecv8xRV0NW+ZD3Fvf/zadVpCRJOa0OPEdjs/JvAH8gRlo9AXy2WN8deIroqHMjjSOyuvA9SElS1ap6SOdIYlDyhp3W/50Ylrw78BPg+GL9HGBPYHvgPaLbjiRJtakqIC8ihh6/1mn9ZODV4vcBxPzH9YvjZ4p/7wH+uqK6JElaLrkf0rmKuPR6ChGC+wDrAu+UznkPGNJ+kBp3JUlSb9d5YPLWwGPAscTDOgDrAa+UzjkCmNTsS70HKUmqWs5GAS3A5cB+xCSPJcX6HGLSxxeLc/YE7s5YlyRJXVR9ifVlOl7xGEHsJn9a+vxG4HvAccAtRFDeB9xRcV2SJDVVdUCWH7aZBWzSzXl3ABsT70IuqrgmSZKWqSf1Yl2K4ShJ6iF6UkBKktRjGJCSJCUYkJIkJRiQkiQlGJCSJCUYkJIkJeQKyB8A/ZusrQ2cC1yPkzwkST1A1QG5LXAZ0EpH79XU2qXAs8BE4FRgy4rrkiSpqaoD8n3gNhqndXReGwRsQ+wgnwauIKZ8SJJUm6oD8nHgv4CFTdZGElM/lhbHs+iYESlJUi1yz4NM+ZDGkVirAR+0HzgPUpK0Ius8F7K81h+YSwQjxCzII5p9mfMgJUlV6yk7yCuBa4DpwBhgu1orkiSt9HK95nEAEYTdrZ0EXAV8BOxM40M9kiRll2sHOWMZa0uB6zLVIknSMtlJR5KkBANSkqQEA1KSpAQDUpKkBANSkqQEA1KSpISqA3I7OiZ2tNuaaAYwZDnXJUnKrqqAXJUIxxtpnAP5T8AUYDRwHzB0GeuSJNWiqkYBY4G9gAGltT7ABGAzolNOX6KbzoXdrF9QUW2SJC1TVTvIq4D9gbdLaxsAb9LRRm4mEYrdrUuSVJuczcpXI3qttvsI6NdkHXDclSRpxVQeczWUGGvV7jjglCbr3XLclSSpajlf83gb+D2wL7AmcDDxEE9365Ik1abqgLwFWFI6Hgd8E7gdOBd4fBnrkiTVoup7kEd1On4O2DNxXnfrkiTVwk46kiQlGJCSJCUYkJIkJRiQkiQlGJCSJCUYkJIkJRiQkiQl5A7IrwEPEQ3Jv19a3xJ4AHgCODNzTZIkdZEzIFchRlj9PTEceUtgp+KzS4DjgS2Kn90y1iVJUhc5A3IdYqTVLGAp8CCwIzCs+PkN0AbcAOycsS5JkrrIGZCvEaOtvgZsDuwDDAKGA6+XznsTWDtjXZIkdZFzHuRSYC/gRKAF+DUwB3gP+EzpvMF0DE92HqQkaYXXF7iwdHwr8GViF/sisF6xfinw9WZf5DxISVLVcu4glxAh+QtiN/kK8Ejx2WnAncDvgLVwHqQkqWY5AxJgPLBJ8fvTpfXLgV8CQ4EniYd1JEmqTe6AhMZgLJtd/EiSVDs76UiSlGBASpKUYEBKkpRgQEqSlGBASpKUYEBKkpSQ+zWPwcBRRP/Vm4AZxXp/4AhgBHAt8GjmuiRJapB7B3ll8d+8E7gY+FKxPgXYlJjo8XNgo8x1SZLUIPcOcivgm0Qz8vuBUUTjgL2BkcDHxDzIscDkzLVJkvRHuQPye8B9wAvEBI8jgQ2AV4lwBHge+GrmuiRJapAzIPsDE4BTgT8APyamdjxENDFv14dobA447kqStOL7PPDb0vFBwHnA6sA8Ou6Hngwc1+yLHHclSapazod0XiJ2rEcCo4nJHrcDC4BpwA+BPYjg/EXGuiRJ6iJnQC4m7i0OJx7CORO4ufjsaOANYFfgAJzqIUmqWe6HdF4jHtTpbAEwKXMtkiR1y046kiQlGJCSJCUYkJIkJRiQkiQlGJCSJCUYkJIkJeR8zaMPsEantY+B94vfhwLDgGcBO+VIkmqVMyDXA24sHQ8FniAmeewLnE5M9hgK7AYsylibJEk9Qh/gemIGJMQEj5HF7xcDBzf7Y3uxSpKqVtc9yOOI4chPEcG4CHil+Oxe4C9rqkuSJCB/qzmAIcBhwFdKx++XPl9ATPgAHHclSVp5/DNwSul4OI3NyY8Gvt/sC7zEKkmqWh2XWPcDflY6nkvMg/xzYnDy14kxWJIk1Sb3JdYBwLvAM53WjwGuIAJ7KjAjc12SJDXIHZALiZmPnd0HbJa5FkmSumUnHUmSEgxISZISDEhJkhIMSEmSEgxISZISDEhJkhIMSEmSEnIH5GDgEqIh+RSgf7E+Avgp0SBgfOaaJEnqIndAnkXMgNweGAgcUqxfDtxKzIY8go5G5pIk1SJnJ52+wC7AvwDbAicBbwFrAH8GXA20Ff+OAe7PWJskSQ1y7iDXBgYB/0k0JL8f+DJxefVVIhwB5gDrZqxLkqQucu4g24h7kGOJ+Y+PAUcCk4mZkO0GEDMhAedBSpJWfC3E3McBxfFBwDnAqsSucXCxfhYxULlbzoOUJFUt9w5yEnA9cDdwAHAg8DFwAXADMdVjZ+BfM9YlSVIXucddnQdMBz4H7A68XqyfDuwADAfOpHSJVZKkOuQOSIDHi5/OpucuRJKk7thJR5KkBANSkqQEA1KSpAQDUpKkBANSkqQEA1KSpITcr3l8nui/2u5/gHlEl51dib6stwGvZa5LkqQGuQPyEGAUMKs4fogIyFOBvyACczqwHR1NBCRJyi53QI4ixl291KmGo4rPFgBrEm3opmSuTZKkP8p9D3IUcAkxyeNioD+wATCXjvZyvwO+kLkuSZIa5N5BXgn8DHgbuBT4DnALsKR0zhJiuDLguCtJ0opvNWDT0vFBwPnAGsR9yHYnAq3NvshxV5KkquW+xPpLYBtgPWA88N/Au8TDOkcTT7keClyXuS5JkhrkvMS6CNiH2CH2Ay4Cbi0+G0fMitwTOBl4KmNdkiR1kfse5MPANxLrrwKHZa5FkqRu2UlHkqQEA1KSpAQDUpKkBANSkqQEA1KSpAQDUpKkhLoCsgUYVNN/W5KkZaorII8DrikdjwaeBJ4ALsOdrSSpZnUE0VZEO7myC4gGApsTvVnH5C5KkqSy3AE5EPgP4KTS2vBifWZxfBuwQ+a6JElqkLvV3I+AycBbpbVhwJul43eIocmA464kSSu+rYEXiYC8HHiGaFI+olhvNw44s9kXOe5KklS1nDvIF4kRVwCfA74APEo0Kl8MbFicswtwdca6JEnqImdAvg3cWfy+GbAj8EhxPBG4A5gFvEHMiZQkqTa570G2e5LGsVdTiWHKg4A5tVQkSVJJXQGZMr/4kSSpdr6QL0lSggEpSVKCASlJUoIBKUlSggEpSVKCASlJUkLu1zw2Ao4k+q/eBNxcrA8CJhBt564B7slclyRJDXLvIK8nZj5eDEwiRl8BXEgMUb4MOJ9oQydJUm1yBuQAYDrRZ/UB4DFixzgQ2Ak4HbiPaGS+X8a6JEnqImdALgS+C2wH3A5sQfRfHQnMBpYU571UrEmSVJs6Ws09BpwAnEHcj5wG9C993g/4qP3AeZCSpBXdF4l7j+0OA6YQl17nAasW66cB/9jsi5wHKUmqWs4d5PPAaOB4YqzVBOBY4tLrVOJBnXuA/YEdMtYlSVIXOe9BfkjMgATYGDiEeGgH4DvEAzobAn9H7CglSapN7nuQrwNnJ9Y/pvHyqyRJtbKTjiRJCQakJEkJBqQkSQkGpCRJCQakJEkJBqQkSQl1BORIYHtgrU7rGwDbEq3mJEmqVe6AnAhcR0zreADYslg/nBiFdTjwv8R8SEmSVhpzgMHF70cTsx9bgJeBdYr1KcC4Zl9iL1ZJUtVy7yB3A+YXv28BvAJ8FniP6LID8BAdO0tJkmqRu9Xc48S9xrOBd4BzgI2IhuXtFhITPgDHXUmSVg57AI8Au5TWhgGvlY6PJUZedctLrJKkquW8xLoKsXPcH3gYGAoMBN4AXgK+SjzBeiBwS8a6JEnqIucl1nWIILygtDYNOAsYT8yDHAJcCjyYsS5JkrrIGZCvArt289lviXcgJUnqEeykI0lSggEpSVKCASlJUoIBKUlSggEpSVKCASlJUoIBKUlSQl0BeTOlfqvAxsAdwKPESCxJkmqVOyD3Bu4F9iTGXLW7DPgR8BXgb4G/yVyXJEkNcgfkDOAQOkZbAaxFjLy6DfgIuJYISUmSapM7IN8CngcWl9bWpXGax+vAZ3IWJUlSZ7nnQaYsIHaR7QYRA5QB50FKklYus4lRVxAhPQtYuzg+jxh51S3nQUqSqtYTdpCLgR8So68eBrYGTqy1IknSSq+ugNwWWFg6Pge4i9hFfpd4WEeSpNrUFZAvJdaeyF6FJEndsJOOJEkJBqQkSQkGpCRJCQakJEkJBqQkSQkGpCRJCT2hUQBAX2A/YARwA/BcveVIklZ2PWUHeQYwhmhmPo0ISkmSatMTdpD9gIOBDYFFwEjgAOCsGmuSJK3kesIOcgNgDhGOAM8Ao+orR5KknrGDbBrSqXFXbW1t7zrRQ5L0SbW1tf2qtbV1x7rrWF6DgXlAS3E8EZjQ7A8MR0nSn+KT5EdPuMQ6H5gBtALbAIcCU2utSJK00usJAQkwHhgGfBs4Bnih3nIkSSu7nnAPEuL1jhPqLkKSpHY9ZQf5ibS1tZ1Wdw2SpN7H/JAkSZIkffr61l3Ap2As8DSwtO5CJEm9Qn9gX6LFaQvwcr3lfPrWB8YBHwADa65FktR7XAFcBOwPPAbsVW85f7rhwHVEQ4E1gGuLf/cAJhPvURqQkqTOUvmxJtGcpv0tjsOAC1N/3JJa7IFOJ96T7E+k/bmlz2YDGxM7SUmSytrzox/wODCl9NkgojHN1cSusldaFZgJ3E3XUJ+NO0hJUlp3+TEGeJRoVJPUUxoFLMsIYvc4ElgLeLPeciRJvUQqPyYCfwXsDszt7g97wyXWPsBdwDnEzMgdgH1Kn3uJVZKU0ofYOf6YyI9tgW8R7UyPBxYX570APNT5j3vDax6bEP8TPwEeIGZFPks8nAOwGtHs3Nc8JEll5fx4ENgUeKNYW5d4G2J9YAHw+5pqlCRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkqTl83/CoNjVcBmrVAAAAABJRU5ErkJggg=="
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: "null",
          x: ["x1", "x2"],
          y: [123, 123]
      });
    })
  })

  it("should error (error type format input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n1.receive({
          payload: "null",
          x: false,
          y: false
      });
      n1.on("call:error", (call) => {
        done()
      })
    })
  })
 


  it("should return line chart with defined width and height", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 200,
        width: 400,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })


  it("should return shift data in data-window", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Bar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 1,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      let count = 0;
      n2.on("input", (msg) => {
        try {
          if (count === 0) {
            msg.payload.should.equal(
              "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"
            );
          } else if (count === 1) {
            msg.payload.should.equal(
                "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"
            );
            done()
          }
          count++;
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
      n1.receive({payload: 123});
    })
  })


  it("should return line chart with defined config in message", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "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"
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: 123,
          config: {
            chartType: "Line chart",
            title: "",
            xLabel: "",
            yLabel: "",
            dataWindow: 0,
            output: "base64", 
            height: 200,
            width: 400
          }
      });
    })
  })


  it("should return line chart with defined config in message (but config is empty)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 200,
        width: 400,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal(
              "iVBORw0KGgoAAAANSUhEUgAAAcIAAAEICAYAAADMa/SXAAAABmJLR0QA/wD/AP+gvaeTAAAPwklEQVR4nO3de7BV5XnH8e8BAUGgIRJRGQQTSJqqUdPWTEWt8RKthdqaKBgvSQVRaxKsUpkz1RpNUtCUVIkOY4zSxkvSNIjXitHEFppSjRdETBtNVJSboGJEhIhw+seztmedM+dsk+le7z6c9/uZOeNe794un/9+vuvyPCBJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJktSj9K34/JOAZ4AdxfFQYDJwFPAmsL5UxyTguGJtY8V1SZIEQJ+Kzrs3MAWYD/QrrS8ExgKvAXcVnwGuBCYW64uAkRXVJUlSB7tUdN6DgHHA9tLaQOAt4NLi+Ahgf+BF4HRgDLAVGEXsGudUVJskScmsBgZ1WtsPuBp4BBhMBOYTpe9PBeYlqU6SlL2qdoT1vAosAcYDJwBP1vvxrFmzvtzS0nJZea2tre0/Wltbj6ysQkmSGqS8IxxL+2VRgDOB64AhwAagpVifCcyod9LZs2e3NbZMSVKuqnpYpisvA2cRT4Z+DPhL4EfAJmKH2AocQgTkgoR1SZIyVnUQXgdsKz5vAk4E/gK4sPju9uK7qcBw4AvAecDzFdclSdLOy0ujkqRGSXlpVJKkHscglCRlzSCUJGXNIJQkZc0glCRlzSCUJGWt6iDcjfaOMTV9gRFd/LY/MKzieiRJ6qDKINwNWE5Mnaj5LPA08M/ACmCfYv144CliNNOddBzdJElSZaoKwmnEQN4xndb/nhjKezwRhhcU69cAE4DDgTeI7jOSJFWuqiD8FjFcd12n9UuANcXngcT8wb2L42eLfz4E/FFFdUmS1EHqMUy3EJdMLyXC7iRgT+D10m/eAIbWDroawyRJ0s6i82Deg4FlwPnEQzMAewEvlX5zNjCr3kntNSpJapSUr0+0APOBk4nJE9uL9bXEZIqPFr+ZAPw4YV2SpIxVfWn0RaC2extJ7A6/W/r+TuArwHTgHiIQlwIPVFyXJElA9UFYfuhlFfDhbn73ADCOeJdwa8U1SZL0rp7UWWYHhqAkKbGeFISSJCVnEEqSsmYQSpKyZhBKkrJmEEqSsmYQSpKylioIvwYMqLO2O/BNYCFOnpAkJVR1EB4K3AS00t5btKu1G4FfADOBy4ADK65LkiSg+iB8E7iPjtMlOq8NBg4hdoTPAN8hplJIklS5qoNwOfCvwJY6a6OIKRU7iuNVtM8olCSpUqnnEXbl13Qc1bQr8FbtwHmEkqTeoPNcwvLaAOBlIgAhZhGeXe9kziOUJDVKT9kR3gzcBiwGJgKHNbUiSVI2Ur0+MZkIvO7WLgZuAd4GjqbjwzWSJFUm1Y5wyXus7QBuT1SLJEnvsrOMJClrBqEkKWsGoSQpawahJClrBqEkKWsGoSQpa1UH4WG0T5ioOZh4aX7ob7guSVJlqgrCfkQI3knHOYR/DcwFxgNLgWHvsS5JUqWqeqF+EvBnwMDSWh9gBrAf0TmmL9Fd5vpu1udVVJskSe+qakd4C3AKsLG0Nhp4lfb2aU8S4dfduiRJlUvZdHtXopdozdtA/zrrgGOYJEk7t/L4pWHEuKWa6cCldda75RgmSVKjpHx9YiPwP8BngPcBpxMP03S3LklS5aoOwnuA7aXjKcDngfuBbwLL32NdkqRKVX2P8JxOx78EJnTxu+7WJUmqlJ1lJElZMwglSVkzCCVJWTMIJUlZMwglSVkzCCVJWTMIJUlZSx2EnwIeJRprf7W0fiDwCLACuCpxTZKkjKUMwl2I0Up/TgzhPRA4qvju28AFwAHF33EJ65IkZSxlEO5BjFpaBewAfgocCQwv/v4LaAPuAI5OWJckKWMpg3AdMXLpU8D+wEnAYGAEsL70u1eB3RPWJUnKWMp5hDuIqfUXAS3AfwJrgTeAD5R+N4T2Ib3OI5Qk9Rp9getLx/cCHyd2pS8AexXrNwKfrnci5xFKkhol5Y5wOxGGPyB2hy8BjxffXQ48CPwMeD/OI5QkJZIyCAGmAh8uPj9TWp8P/JCYVv808dCMJEmVSx2E0DEAy1YXf5IkJWNnGUlS1gxCSVLWDEJJUtYMQklS1gxCSVLWDEJJUtZSvz4xBDiH6C96F7CkWB8AnA2MBL4PPJG4LklSplLvCG8u/psPAjcAHyvW5wIfISZQ/Auwb+K6JEmZSr0jPAj4PNFU+2FgLPGC/YnAKGAbMY9wEjA7cW2SpAylDsKvAEuB54mJE9OA0cAaIgQBngM+mbguSVKmUgbhAGAGcBnwv8A/ElMmHiWacdf0IRp0A45hkiT1Hh8CniodnwZcC+wGbKD9fuUlwPR6J3IMkySpUVI+LLOS2IFOA8YTkyjuBzYDi4CvAycQAfmDhHVJkjKWMgjfIe79jSAehrkKuLv47lzgFeBYYDJOoZAkJZL6YZl1xAMznW0GZiWuRZIkO8tIkvJmEEqSsmYQSpKyZhBKkrJmEEqSsmYQSpKylvL1iT7A73Ra2wa8WXweBgwHfgHYOUaSlETKINwLuLN0PAxYQUye+AxwBTGJYhhwHLA1YW2SJCXVB1hIzCCEmDgxqvh8A3B6vX/ZXqOSpEZp1j3C6cQQ3p8TAbgVeKn47ifAHzapLklSZlK3WAMYCnwO+ETp+M3S95uJiRSAY5gkSb3P3wCXlo5H0LHJ9rnAV+udwEujkqRGacal0ZOB75WOXybmEf4+MaD308R4JkmSKpf60uhA4FfAs53WzwO+QwTzAmBJ4rokSZlKHYRbiJmDnS0F9ktciyRJdpaRJOXNIJQkZc0glCRlzSCUJGXNIJQkZc0glCRlzSCUJGUtdRAOAb5NNNaeCwwo1kcC3yVepJ+auCZJUsZSB+EcYgbh4cAg4IxifT5wLzGb8GzaG3JLklSplJ1l+gLHAH8LHApcDLxGTK3/PeBWYjL9rcBE4OGEtUmSMpVyR7g7MBj4J6Kx9sPAx4nLomuIEARYC+yZsC5JUsZS7gjbiHuEk4j5g8uAacBsYiZhzUBiJiHgPEJJUu/RQswdHFgcnwZcA/QjdoFDivU5xODebjmPUJLUKKl3hLOAhcCPgcnAqcA2YB5wBzGF4mjg7xLWJUnKWOoxTNcCi4EPAscD64v1K4AjiGn1V1G6NCpJUpVSByHA8uKvs8WpC5Ekyc4ykqSsGYSSpKwZhJKkrBmEkqSsGYSSpKwZhJKkrKV+feJDRH/Rmn8HNhBdZ44l+o7eB6xLXJckKVOpg/AMYCywqjh+lAjCy4A/IIJxMXAY7S/bS5JUmdRBOJYYw7SyUw3nFN9tBt5HtF+bm7g2SVKGUt8jHEtMqF8G3EBMqB8NvEx7W7WfAb+buC5JUqZS7whvBr4HbARuBL4I3ANsL/1mOzHEF3AMkySp99gV+Ejp+DTgOmJC/YbS+kVAa70TOYZJktQoqS+N/hA4BNgLmAr8G/Ar4qGZc4mnSs8Ebk9clyQpUykvjW4FTiJ2fP2BbwH3Ft9NIWYVTgAuAX6esC5JUsZS3yN8DPhsF+treI+p9JIkVcHOMpKkrBmEkqSsGYSSpKwZhJKkrBmEkqSsGYSSpKw1KwhbgMFN+m9LkvSuZgXhdOC20vF44GlgBXAT7lQlSYk0I3AOItqolc0jXrTfn+g9OjF1UZKkPKUOwkHAPwAXl9ZGFOtPFsf3AUckrkuSlKnULda+AcwGXiutDQdeLR2/TgznBRzDJEnqPQ4GXiCCcD7wLNFse2SxXjMFuKreiRzDJElqlJQ7wheI0UsAHySm0D9BNNx+BxhT/OYY4NaEdUmSMpYyCDcCDxaf9wOOBB4vjmcCDwCrgFeIOYWSJFUu9T3CmqfpOI5pATG0dzCwtikVSZKy1Kwg7Mqm4k+SpGR8cV2SlDWDUJKUNYNQkpQ1g1CSlDWDUJKUNYNQkpS11K9P7AtMI/qL3gXcXawPBmYQ7dZuAx5KXJckKVOpd4QLiZmDNwCziJFMANcTw3pvAq4j2q9JklS5lEE4EFhM9BF9BFhG7AAHAUcBVwBLiYbcJyesS5KUsZRBuAX4EnAYcD9wANFfdBSwGthe/G5lsSZJUuWa0WJtGXAhcCVxv3ARMKD0fX/g7dqB8wglSb3FR4l7gzWfA+YSl0w3AP2K9cuBv6p3IucRSpIaJeWO8DlgPHABMW5pBnA+ccl0AfHAzEPAKcARCeuSJGUs5T3CXxMzCAHGAWcQD88AfJF4UGYM8KfEDlGSpMqlvke4Hri6i/VtdLxsKklSEnaWkSRlzSCUJGXNIJQkZc0glCRlzSCUJGXNIJQkZa0ZQTgKOBx4f6f10cChRIs1SZKSSB2EM4HbiekSjwAHFutnESOazgL+m5hPKElSr7MWGFJ8PpeYPdgCvAjsUazPBabUO4m9RiVJjZJ6R3gcsKn4fADwErAP8AbRdQbgUdp3ipIkVSp1i7XlxL3Aq4HXgWuAfYnG2zVbiIkUgGOYJEm9ywnA48AxpbXhwLrS8fnEKKZueWlUktQoKS+N7kLsBE8BHgOGAYOAV4ip9J8knhg9FbgnYV2SpIylvDS6BxF480pri4A5wFRiHuFQ4EbgpwnrkiRlLGUQrgGO7ea7p4h3CCVJSsrOMpKkrBmEkqSsGYSSpKwZhJKkrBmEkqSsGYSSpKwZhJKkrDUrCO+m1E8UGAc8ADxBjGqSJCmJ1EF4IvATYAIxfqnmJuAbwCeAPwH+OHFdkqRMpQ7CJcAZtI9cgphUvw9wH/A28H0iDCVJqlzqIHwNeA54p7S2Jx2nT6wHPpCyKElSvlLPI+zKZmJXWDOYGNQLOI9QktQ7rSZGMEGE8Spg9+L4WmIUU7ecRyhJapSesCN8B/g6MZLpMeBg4KKmViRJykazgvBQYEvp+BrgR8Su8EvEQzOSJFWuWUG4sou1FcmrkCRlz84ykqSsGYSSpKwZhJKkrBmEkqSsGYSSpKwZhJKkrPWEF+oB+gInAyOBO4BfNrccSVIuesqO8EpgItGUexERiJIkVa4n7Aj7A6cDY4CtwChgMjCniTVJkjLRE3aEo4G1RAgCPAuMbV45kqSc9IQdYd0w7moMU1tb20onUEiSflttbW2Xt7a2frnZdXQ2BNgAtBTHM4EZzStH2rn5P4nSb6cnXBrdBCwBWoFDgDOBBU2tSJKUjZ4QhABTgeHAF4DzgOebW44kKRc94R4hxGsTFza7CElSfnrKjlBSg7S1tV3e7BokSZIkSZIkKb1JQL9mFyFJUmp7A1OAt4BBTa5F2mn4sIzUexwEjAO2N7sQSZKaaTXuCKXfmDtCSVLWDEJJUtYMQklS1vo2uwBJDbcr0ch+R7MLkSRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiT9P/wf4GmM1FsUtv8AAAAASUVORK5CYII="
          );
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({
          payload: 123,
          config: {}
      });
    })
  })



  it("should return line chart with binary format", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "binary",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          base64_str = "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"
          binary = Buffer.from(base64_str, 'base64');
          msg.payload.should.deepEqual(binary);
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

});
