var should = require('should');
var helper = require("node-red-node-test-helper");
var chartNode = require("../src/chart-render.js");

helper.init(require.resolve('node-red'));

describe('chart-render Node', function () {
  // this.timeout(5000);

  beforeEach(function (done) {
    helper.startServer(done);
  });

  afterEach(function (done) {
    helper.unload();
    helper.stopServer(done);
  });

  it('should be loaded', function (done) {
    var flow = [{ id: "n1", type: "chart-render", name: "test name" }];
    helper.load(chartNode, flow, function () {
      var n1 = helper.getNode("n1");
      n1.should.have.property('name', 'test name');
      done();
    });
  });

  it("should return line chart with default config (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("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");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return line chart with default config (Array input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Line chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("iVBORw0KGgoAAAANSUhEUgAAAcIAAAEICAYAAADMa/SXAAAABmJLR0QA/wD/AP+gvaeTAAAW4UlEQVR4nO3df7TUdZ3H8ef3EoIgoaKF+IMUyvyVbirVmqZpq6IY6Kr4I/fI+hP0xFq7cg+63U2N2w+1ljSyFY+EhnjEEjO3n7akq6ibpeW2KpqEEKmJxq8r3O/+8ZnbHYa5lzv33s985zvzfJxzD/Od+dyZt3M4vvl+5zWfN0iSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJNWUARGf+xTgdGAg8GIXr30mcDywGvhzxFokSaqqacD3gAnAY8Anyqz5CnAHcD7wHLB71aqTJCmy3wI7FW6PAfYveXw7YBUwuHD8r8BnqlOaJEmd3hHhOXcEhgBfB94PrAD+oWTNaGAlsKFw/BxwVIRaJEkNaFLzohGb2Hg+aTJucevkM7pbm0R4/VHAcuBg4BngGqAJmFm0Zl9gAfA3heOzCI3wUoBZs2a1JEnyueInTdP0583NzUdHqFeSVCcmzFhweDtMTWAyhauOKU2Hfb/1jCe7+p0YZ4QdwZdnCsdLgYkla14B9iA04hTYC3ih48Hm5uYWoKX4F1pbW9MItUqScu7Eyx8Y1DT0zVMSuCiF4wpneO3Aj1O4ZcgLPNXd78dohJuAB4HPAvcDU4FvFB6bTLgM+iSwBGgGfgycB5wcoRZJUp06eebC3dm8+UJ4cxqwC0ACa1KS21M2fe37recs68nzxGiEABcSwi8zgP8A7iuz5gLgKuAywiXRcl+xkCTpr1paWpoe37Dfx5tIL0o3t58KScfXAJ9M4ZZk8ND597dMWFfJc8ZqhOuBa8vcv6Do9uvAFZFeX5JUR467cuHwQUn7mU9sYHpCul/hs7KNCSxKkuRr98068+HePnesRihJUp+dNGPhoU20X5TSfi7hGwkAy1LSW5reTm9dfP3Zr/b1NWyEkqSaUhx+gfbjCmd/ReGXpkV3333G5v56PRuhJKkm9Ff4pVI2QklSZmKEXyplI5QkVV3M8EulbISSpKqpRvilUjZCSVJU1Q6/VMpGKEmKolz4hZQ3SJJ5McMvlYrVCE+lsIF2wRXA071YI0nKkW2FX5q2Hzp/ceTwS6ViNcIjgdl0brz9Si/XSJJyoJbCL5WK1QjHAncDBwGP0Dl3sNI1kqQaVovhl0rFaoRjgIuBl4EbgQnAb3qxRpJUY2o9/FKpWI3ww8CbhdurCNMopvd0TbnBvJKkbOUl/FKpGI1wOCH40tHIBgJvVbLGwbySVBvyGH6pVIxGuAY4HLgNWE6YTj++8NgNwMPAPd2skSRlLM/hl0rFujR6MnAEMAj4Mp1ne62EWYXdrZEkZaQewi+VitUI24ElZe5f3YM1kqQqqrfwS6XcWUaSGlS9hl8qZSOUpAbSCOGXStkIJakBNFL4pVI2QkmqY40YfqmUjVCS6kyjh18qZSOUpDph+KV3bISSlGOGX/ouViMcROe1aAhflt9UZt0wYGfg95HqkKS6ZPil/8RqhNOBKXTuFnMh8MuSNRMJO80sIzTO8cDGSPVIUl0w/NL/Ys4jnAg8282a64FjgZeAW4HTgDsj1SNJuWX4Ja6Y8wjPBUYDD7B1g9sDaCM0QQhbrY0rs06SGtZJM+7YJ2HAJbBmCiQjCne/SsrcZGDTnMXXnvFipgXWiViNcDnwKHAXMIfw+eDCoseH0zmLEGAtsEPHgfMIJTWqlpaWpic27ncCaToNOAFoggSSdGlK081rB62766GW8zdkXWc9SarwGucAHwUuLbpvJPAksHvh+GJgL2BmV0/S2tqazpgxoxr1SlLVTWpeNOLttG0KcAmwT+Hu9aQsaE/Tmx/40llPZFheXYs1mPcXwEeAvwBH0hmU2ZtwJrgKeA04GHgamEQIzkhSQ+kIv7ydthl+yUiswbyzCQN41wLPEAbwQkiSLgUWA9OAuwmXTe8HHopQiyTVHMMvtSXWZ4S3FH5KXV10ewnwvkivL0k1x51fapM7y0hSRO78UvtshJIUgTu/5IeNUJL6kTu/5I+NUJL6yPBLvtkIJamXDL/UBxuhJFXA8Ev9sRFKUg8YfqlfNkJJ6obhl/oXuxHuBRwD3F7msf0Je5B2WAysjFyPJG2T4ZfGErMRDgDmEfYWLdcIzwJG0Dmd3rNTSZkqF35JYE1Kcrvhl/oVs/lcBTwO7NvF42OBzwIrItYgSd3aVvglGTx0/v2GX+parEZ4BGHSxL8DLV2sGUMYxLsT8DxwHmFahSRFZ/hFHWKNYboWmEhodl35KnAfofnNBj4NXAcO5pUUj+EXlYox6PaDdE6e2J4wfPcOwtilDkOAAwiXTgHOBT4EXN7VkzqYV1JvbRl+4bjC3e3ATw2/KMYZ4f8AhxVuf4BwdtjRBCcDzxGG8S4ALgOWExrgjAi1SGpghl/UE7GTmquBe8rc3waMJzTCQYQ5hT+LXIukBmD4RZWK3QhXseVXJxYU3f4d3VwKlaRKGH5Rb/ndPUm5ZvhFfWUjlJQ77vyi/mQjlJQbReGXqcCuYPhFfWcjlFTTDL8oNhuhpJpk+EXVYiOUVFMMv6jabISSMmf4RVmyEUrKjOEX1YLYjfBk4JPAhWUeGw3cCIwizC28OXItkmpASfhlEiQd/x8y/KJMxGyEuwFfBF7o4vG5wDeBB4AfAk8Bj0SsR1KGugm/3Gv4RVmK1QibCGd41xIm0ZfaEXgfsLBw/B3gJGyEUt0Z/y/fOawpSaaStE8mTKQBWAbMGZhsN/feWae+lmF5UrRG+BngQcJ+ouWMAlYWHa8CDo5Ui6QqO7rltsFDNw45M6F9KmkyrnB3O/AASXLTYYOefbClpaU9yxqlDjEa4VjgAuAqwtyvUcBRwH8VrVlHGODbYQhF0+kdzCvl04SrFu6dvt1+CRuYAukuYeRp+hokc1M2z+kIv9yfcZ1SsRiNcCPh8799gJGEJrdbyZoVwDBCM1wDHAI82fFgc3NzC9BS/Autra1phFol9dEW4ZdN7ZNI2CL80jR4h/mLDb+ohsVohMsJIRkIg3nHAHcVjm8AHibMKJwNLAYeAz4GzIxQi6RIDL+oXsT++sT/AhcVHbcC6wu3ZxGG8e5KOPvzX4xSDrjzi+pN7EbYRgjCdFhd8vijkV9fUj9w5xfVM3eWkdQld35RI7ARStqCO7+o0dgIJQGGX9S4bIRSgzP8okZnI5QakOEXqZONUGoghl+krdkIpTpXEn45FZIBhYcMv0jEbYTDCFMmVhAuuZQaROfnEQBvAZsi1iM1lG7CL4sMv0idYjXCzwETgT8A7yZsvv1myZrpwBRCA4QwvPeXkeqRGobhF6kyMRrhdoRt1fYm7CwzDzgG+F7JurGEZvlshBqkhmL4Req9GI1wMzCOcOnzcGB/4PNl1o0BzgVGE6bU3xmhFqmuGX6R+i5WI1xBaIaXAYMJZ4mllhP2Gr0LmEP4fHAhOI9Q6o7hF6l/JRGecxdgX8K4JYBpwPuBy7v5nXOAjwKXdrWgtbU1nTFjRox6pVzoCL8k4fP1/Qp3b0zgPsMvUu/FOCPcnvC54IGEkUujCWd/ED43fJNw9vcL4COEyfRHYlBGKsvwixRXrMG8XydMnN8APEfntPkpwFLCQN7ZhLPGtcAzwG0RapFyyfCLVD2xvj5xY+Gn1NVFt28p/EgqMPwiVZ87y0gZM/wiZctGKGXEnV+k2mAjlKrM8ItUW2yEUhUYfpFql41Qiqgo/DKN8B1bwy9SjbERSv3M8IuULzZCqZ8YfpHyyUYo9ZHhFynfYjXCdwKTgJ2BHxF2jik1ADgd2B34LvBCpFqkfmf4RaofsRrhvcAjwPPAfcDfFW4X+yKwG/Bj4EHgaMLUCqlmGX6R6k+sTbfX0bmd2lGEDbiLG+F2hFmE7yHsR7onMBm4PkI9Up8YfpHqW4xGuB6YABwAXAgcBHy6ZM1oYCWhCULYmPuoCLVIvWb4RWoMMcMyrwFLgCOA8RSG7hY0dfeLDuZVlgy/SI0lxqDbscBZwDWF4/OADxEG9HYYBiwD3gWkwJWEyfZf6epJHcyrmLYMv3Bc4e524KeGX6T6FuOM8I90zh1cCZxPmD0I4XPA5wizCpcAzYSwzHnAyRFqkbpl+EVSjEb4FvBJYCowGLgJWFRm3QXAVcBlwKXAixFqkbZi+EVSsVifEf4auKTM/QuKbr8OXBHp9aWtGH6RVI47y6juGX6R1B0boeqSO79I6ikboeqK4RdJlbIRKvcMv0jqCxuhcsvwi6T+YCNU7hh+kdSfbITKBcMvkmKxEaqmlQu/kPIGSTLP8Iuk/hCrER4AfB7YC/hvwl6i60vWnErYUabDFcDTkepRjmwr/NK0/dD5iw2/SOonsRrh7YTt034EfAu4HPhSyZojCXuQdkyvfyVSLcoJwy+SshCrET5FmDoP8ChwSJk1Y4G7CfMKH6FzNqEajOEXSVmK1QgvKPx5DPBPwNll1owBLgZeBm4kDPP9TaR6VGMMv0iqFbEa4XDCZc8dgeMJza7Uh4E3C7dXEabZTwcH89Yzwy+Sak2sQbf3EybSz+vi8eGEcExHs5sOjACu7uoJHcybX1uEX0JIasvwy2DDL5KyE+OM8F3Ax4B1dA7b/SkwB7gBeBi4BzgcuA1YDkwExkeoRRky/CIpD2I0wjeAg0vue6vwZyudX6M4GTgCGAR8uWiNcs7wi6Q8idEI24CuPudZXXS7HVgS4fWVAcMvkvLKnWXUJ4ZfJOWdjVAVc+cXSfXERqgeM/wiqR7ZCLVNhl8k1TMbocoy/CKpUdgItQXDL5IajY1Qhl8kNbSYjXAwsDth55i2LtYMA3YGfh+xDnXB8IskxZ0+8RnCrMGDCLvIPF+yZiJhp5llhN1lxgMbI9WjIoZfJKlTrEb4OeBQwk4y04HLCn8Wux44FngJuBU4DbgzUj0Nz/CLJJUXqxFOpXM7tV3pHLfUYQ/C5dKXCsdLgHHYCPvdSTPu2CdhwCWwZgokIwp3v0rK3GRg05zF157xYqYFSlLGYjXCxYRZhNcB+wCTSx4fzpbNcS2wQ8eB8wj7pqWlpemJjfudQJpOA04AmiCBJF2a0nTz2kHr7nqo5fwNWdcpSbUg1ny/jxDGLl0PfBtISx4fCTxJCNNAmFS/FzCzqyd0HuG2TWpeNOLttG0KcAnhHyAA60lZ0J6mNz/wpbOeyLA8SapJMc4Im4BbgJPYejL93oQzwVXAa4RxTU8DkwjBGfVCR/jl7bTN8IskVShGIxxJSH8uKrrve8A1wBRgKeHS6TTgbmATYaL9QxFqqVuGXySpf8RohK8Ah3Xx2NVFt5cA74vw+nXNnV8kqX+5s0wOuPOLJMVjI6xh7vwiSfHZCGuQO79IUvXYCGuE4RdJyoaNMGOGXyQpWzbCDBh+kaTaYSOsIsMvklR7bIRVYPhFkmpX7EZ4JmGHmbfLPLY/8NGi48XAysj1VI3hF0nKh1iNcBRwIjCb0ODKNcKzgBF0Tqevi7PTcuGXBNakJLcbfpGk2hOr+RwCvBfo7oxnLPDPwB8i1VA12wq/JIOHzr/f8Isk1aRYjfCBws+nulkzBrgD2Al4HjgP+EukeqIw/CJJ+Zfl5civAvcRmt9s4NOEQb41P5jX8Isk1Y+sGuEQ4Dk6zwAfAz7U8WBzc3ML0FL8C62traXDfavK8Isk1adqN8LJhAb4NLAAuAxYDlwOzKhyLT1i+EWS6lvsRngT5ROjbcB4QiMcRJhT+LPItfSY4RdJahyxG+EXSo4XFN3+HeFMsGYYfpGkxlMX393rK8MvktS4GrYRGn6RJEEDNsKi8MtUYFcw/CJJjawhGqHhF0lSV+q6ERp+kSRtS102QsMvkqSeqptGaPhFktQbuW+Ehl8kSX0RuxF+G7gQ2FDmsdHAjYTZhfOAm3v6pCXhl0mQdPx3GH6RJFUkViM8kTBN4njg4i7WzAW+SRjX9EPgKeCR7p60m/DLvYZfJEm9kUR63j2AdwM/AN4DlJ6d7UjYeHvPwvHlwEhgZrkn++TM7+y5y4C1L/+xbYf1wPaFu5cBcwYm2829d9apr/Vv+ZKkRhHrjPAPhZ9yG25DuBy6suh4FXBwV0/W1j5gw5/ah0LYoNvwiySp32QVllkHDC86HkLRdPqtB/MuY3XbUH63buf3Gn6RJOXJCjq/x1dsIPAKnc3wRuBT3T1R1oN5JUn1qanKr3cDcBrhkulsYDHwZeBjwD1VrkWSpOiXRv8WWF903Fp0PIswjHdXoIWtAzWSJEUXuxH+vuR4dcnxo5FfX5KkblX70qgkSTXFRihJamg2QklSQ7MRSpIamo1QktTQbISSpIZmI5QkNbSY3yMcBuzM1t8l7DCILbdfewvYFLEeSZK2EuuMcCLwOPAN4CeEpldqOuEL9T8q/BwUqRZJkroU64zweuBY4CXgVsL+oneWrBlLaJjPRqpBkqRtinFGuAfQRmiCAEuAcWXWjQHOBeYDZ0eoQ5KkbYpxRjgceLPoeC2wQ5l1ywmXRu8C5hA+H1wI5eYRSpKUHyMJcwg7XAxct43fOYfweWKXnEcoSYohxqXRVcBrwMGF559ECMMA7A2MIJw1Pk3nmeKRwFMRapEkqVuxUqPTgLuBZ4BfAw8V7p9CmFG4hjCY92HgkUIdt0WqRZKk/PPSqCQpBneWkSQ1NBuhJKmh2QglSQ3NRihJamg2QklSQ7MRSpIamo1QktTQbISSpIYWawzTAOB0YHfgu8ALvVwjSVJUsc4IvwhMAF4HHiQ0u96skSQpqhhnhNsR5gy+B9gA7AlMJgzrrWSNJEnRxTgjHA2sJDQ4gOcI0+grXSNJUnQxzgh70ly7XVNuMG+apmvceFuSVKk0TX/e3Nx8dDVfcxjwJyApHF8JfLYXa7ZgE+wb37++8f3rG9+/vvH965ttvX8xLo2+BSwBmoFxwHnAPYXHJgOHbmONJElVEys1egGwC3AZcCnwYi/XSJIUVazvEb4OXFHm/gU9WCNJUtXkZmeZNE3/Lesa8sz3r298//rG969vfP/6xvdPkiRJklTegKwLqMCZwP8B7VkXkjODgL8nbGeXAC9nW07uvJOQdv448Bdgdbbl5NZewETgV1kXkjP7A5MIaftDgVcIfw/Vc6cQ9rUeSBehzDx8RjgK+EfgNsJ/iCrzLeBYYBkwm/CXQj13L2HXo9eB+3AHpN4YAMwDTsu6kBw6CzgE2KnwEyvgWK+mEfrHr4AvAJ8otygPb+ohwHuBzVkXklMnArsBm4DtgZMI/0PXtm0PrAOuLhwfBRwIPJ9ZRfl0FfA4sG/WheTQWMJmIyuyLiSnpgFHAH8Gfku4QpZrK4AhWReRYzsA/0nYvECVOQD4KrCU8D6q58YBc4EP4j/AemMp8HPg18Ai/PtXiR2Bl4A7gCcJf/92yrKg/mAj7L0JwC8JmxiociMJl/UeB87IuJY8GQ78rPCnjbB3zqaz+c0GZmZYS96MIlxJPLBwfA1wXXbl9A8bYe9cSfic691ZF5JDY+m8LArhbPqmjGrJow8CTxR+fgO8ge9fJYYAhxcdn0tohuqZdwCvFh1PAG7NqJZ+YyOs3BDgj4QP3E8v/ByWaUX5MoyQMjse+ADh7ObUTCvKrw/gGWGltgNeIHzOfyDwGHBMphXlz3zCZ6zvB35AF2HBPH19YjBho26/PtFzOxICHyMJlwlGAWuBZ7MsKkfaCM3vPOBIwmcNbg7fOwnh/fTrEz23mfC5/jmEwMdNwE8yrSh/fkAIuZ1C2OLzu9mWI0mSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJFXo/wFX0qMw12mC+AAAAABJRU5ErkJggg==");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: [1, 2, 3, 4, 5, 6]});
    })
  })


  it("should return bar chart with default config (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Bar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("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");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return pie chart with default config (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Pie chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("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");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return radar chart with default config (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Radar chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQCAYAAACAvzbMAAAABmJLR0QA/wD/AP+gvaeTAAAE1ElEQVR4nO3aS6inYxzA8e9wYqaRSC6TkBksxsLCIJcFJZdcUgrFRmkuNQsWFIVZOYtZIRIpReNSkjQWLGShEY5kFobF0KFEbmlCE47F+6rjNMxM5jgz4/Opt////3su/9+7eZ9+z/MWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsB+ZqB6aE7u4eqZ6vrplVvz66o3qx+q2ecrnrOq96tR5mh+AfeCK6qnqi1mx5dXX1Q3VJdVH1U3VhdX26v5qpvq2On0f5rKsuq/6bJx/5e4GHLIP/xyAvXN+9cuc2GXV5uqFhmrjyerS6sxqY/X+2O/j6trq3erehuf5Aw2Lz47qieqw6ulxzJ/P+83Vi7vIZWl1YjX9728LgP/Civ5agSyulozfl1ZvVutmtd/TUCF8Un01ti+pbh3jd1Zrq1+r28exM9V51XHVb2Ofv7O2PaxAJnbXAf7Ptm7dumGhc+DgNjU1dfT69euP3LJly4bZ8U2bNi2fnJw8u3qpenxW0+Lxc0W1qLqg+rm6vKGaOWa8fqiuqW6sHqyurraNY5+rHqtWjb/vrl7f29wtIAD7mdWrV185PT29rGGL6oMxfFH1acOWVQ1bVcdXd1VrqsMbDte/H9s3Vl9W31SvVVdVp1RvVZ+PbdvHvjvm8XYAmCdzt7Cua6gGDp3T7+FqsqGqmKlert5p2JJa1XC4vrOhEllZvVrdMY69ufq9oSpZ1z/b4y0sABbW3AXk0eqn6rtZ1yMN1cO26sOGB/xUdVpD1fF2dVT1ytg20/Aq7knjnEc0VBk7q2N3k48FBOAgNFGdUZ3ccP6xKyc0LDazLWpYfJ6dv9QAONgsbTjvmKnOXeBcADiATDScgZyz0IkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5I/AIEIfzI+xMxZAAAAAElFTkSuQmCC");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })

  it("should return polar area chart with default config (number input)", function (done) {
    const flow = [
      {
        id: "n1",
        type: "chart-render",
        name: "chart-render",
        chartType: "Polar area chart",
        title: "",
        xLabel: "",
        yLabel: "",
        dataWindow: 0,
        output: "base64",
        height: 0,
        width: 0,
        wires: [["n2"]],
      },
      { id: "n2", type: "helper" },
    ]
    helper.load(chartNode, flow, function () {
      const n1 = helper.getNode("n1")
      const n2 = helper.getNode("n2")
      n2.on("input", (msg) => {
        try {
          msg.payload.should.equal("");
          done()
        } catch (err) {
          done(err)
        }
      })
      n1.receive({payload: 123});
    })
  })


});
